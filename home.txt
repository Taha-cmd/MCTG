MCTG Home Page

supported HTTP Methods:

	.) GET
	.) POST
	.) PUT
	.) DELETE

------------------------------------------------------------

Endpoints: 

	.) users
	.) transactions
	.) tradings
	.) stats
	.) sessions
	.) score
	.) packages
	.) deck
	.) cards
	.) battle

* some of the endpoints don't support all methods
* endpoints are case-insensitive
* some actions require authorization. send the http header "Authorization: Basic <token>" to authorize
* you can get the authorization token by sending your username and password to /sessions

-------------------------------------------------------------

Endpoints in Detail:


		method route constraints => result


	********************************************************************************

	1) users 

		*) GET   /users/<username> => show user's info. requires authorization
		*) POST  /users	payload: "{"Username":"<username>", "Password":"<password>", "Name":"<name>", "Bio":"<bio>", "Image":"<image>"}"  => register new user
		*) PUT   /users/<username> payload : "{"Username":"<username>", "Password":"<password>", "Bio":"<bio>", "Image":"<image>", "Name":"<name>"}"
					 => updates user informationen for <username>. requires authorization. all values are optional 

	********************************************************************************

	2) cards
		
		*) GET /cards => list all cards in the stack. Requires authorization

	********************************************************************************
	3) packages

		*) POST /packages payload: "[{"Id":"<Id>", "Name":"<name>", "Damage":<damage>, "Weakness (optional):<weakness>"}, ....]"
			=> create a new package from an array of cards. a card has the following attributes ( Id:string, Name:string, Damage:double, Weakness(optional):double )
			   the type of the card will be extracted from the name, read the naming rules below

	*******************************************************************************
	4) stats

		*) GET /stats => display current stats for the authorized user. Authorization required.

	*******************************************************************************
	5) sessions
		
		*) POST /sessions payload: "{"Username":"<username>", "Password":"<password>"}" => generate token and create a session
		*) DELETE /sessions => delete the current active session. Authorization required.

	*******************************************************************************
	6) score

		*) GET /score => display descending sorted scoreboard. Requires Authorization 

	*******************************************************************************
	7) /tradings
		*) GET /tradings => display current trade deals. Requires Authorization

		*) POST /tradings payload: "{"Id":"<Id>", "CardId":"<CardId>", "CardType":"<CardType>",
			 "CardElement":"<CardElement>", "MinimumDamage":"<MinimumDamage>", "MaximumWeakness":"<MaximumWeakness>"}"
			=> create new trade deal. Requires Authorization

		*) POST /tradings/<DealId> payload: CardId => make offer for a trade deal
		*) DELETE /tradings/<DealId> => delete an existing deal you own. Requires Authorization

	*******************************************************************************
	8) deck
		* GET /deck => show current deck. Authorization required
		* PUT /deck payload: ["<cardId>", "<cardId>", "<cardId>", "<cardId>"] => configure deck. Authorization required

	*******************************************************************************
	9) transactions

		* POST /transactions/packages payload: "" => acquire a new package. Authorization required

	*******************************************************************************
	10) battle
		
		* POST /battles payload: "" => enter battle queue. Authorization required.

	*******************************************************************************

-------------------------------------------------------------

Card Naming Rules:

	Name: {ElementType}{CardType}

	ElementType: { Regular, Water, Fire }
	CardType: { Spell, Dragon, FireElf, Goblin, Knight, Kraken, Ork, Wizzard }

	Examples: WaterSpell, FireDragon, RegularGoblin, WaterWizzard

* names are case-insensitive
		

